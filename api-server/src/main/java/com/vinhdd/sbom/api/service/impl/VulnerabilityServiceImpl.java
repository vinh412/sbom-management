package com.vinhdd.sbom.api.service.impl;

import com.vinhdd.sbom.api.dto.restTemplate.ComponentReportDto;
import com.vinhdd.sbom.api.model.Component;
import com.vinhdd.sbom.api.model.Vulnerability;
import com.vinhdd.sbom.api.repository.ComponentRepository;
import com.vinhdd.sbom.api.repository.VulnerabilityRepository;
import com.vinhdd.sbom.api.service.VulnerabilityService;
import lombok.RequiredArgsConstructor;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.Map;
import java.util.Set;

@Service
@RequiredArgsConstructor
public class VulnerabilityServiceImpl implements VulnerabilityService {
    private final RestTemplate restTemplate;
    private final ComponentRepository componentRepository;
    private final VulnerabilityRepository vulnerabilityRepository;

    @Override
    public List<ComponentReportDto> getVulnerabilityByComponentPurl(List<String> purls) {
        Map<String, List<String>> requestBody = Map.of("coordinates", purls);
        HttpEntity<Map<String, List<String>>> request = new HttpEntity<>(requestBody);
        String url = "https://ossindex.sonatype.org/api/v3/component-report";
        ResponseEntity<List<ComponentReportDto>> response = restTemplate.exchange(url, HttpMethod.POST, request, new ParameterizedTypeReference<>() {});
        return response.getBody();
    }

    public void saveVulnerabilityReport(List<ComponentReportDto> componentReports) {
        // Save the report to the database
        componentReports.forEach(componentReport -> {
            // Save the report to the database
            componentReport.getVulnerabilities().forEach(vulnerabilityDto -> {
                Component component = componentRepository.findByPurl(componentReport.getCoordinates());
                Vulnerability vulnerability = vulnerabilityRepository.findByVulId(vulnerabilityDto.getId());
                // Save the vulnerability to the database
                if(vulnerability == null) {
                    vulnerability = vulnerabilityDto.toEntity();
                }
                vulnerability.addComponent(component);
                vulnerabilityRepository.save(vulnerability);
            });
        });
    }

    @Override
    public List<Vulnerability> getAllVulnerabilities() {
        return vulnerabilityRepository.findAll();
    }
}
